# This is a basic workflow to help you get started with Actions

name: CI-windows

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  IMAGE_NAME: mse-mongo

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    steps:
       - name: Checkout Repository
         uses: actions/checkout@v4
         
       - name: Get IP Addresses
         id: ip
         uses: candidob/get-runner-ip@v1.0.0

       - name: See IP Addresses
         shell: pwsh
         run: |
           Write-Host ${{ steps.ip.outputs.ipv4 }}
           Write-Host ${{ steps.ip.outputs.ipv6 }}
       - name: create dns mapping
         shell: pwsh
         run: |
           Add-Content -Path "C:\Windows\System32\drivers\etc\hosts" -Value "127.0.0.1 mongo"
           Add-Content -Path "C:\Windows\System32\drivers\etc\hosts" -Value "127.0.0.1 s1.mongo.infrastructure.docker" 
       - name: view host mappings
         shell: pwsh
         run: Get-Content -Path "C:\Windows\System32\drivers\etc\hosts"
       - name: Debug
         shell: pwsh
         run: |
           Write-Host "hello"
           Write-Host ${{ github.workspace }}
       - name: Build test application
         run: dotnet build  "${{ github.workspace }}\ConsoleApp3.sln" 
       - name: Start mongo docker container 
         id: start-mongo
         shell: pwsh
         run: |
           docker build ./Mongo -t mse_mongo
           docker network create mongo-network
           docker run --rm -d -p 27017:27017 --name mongo  --network mongo-network --add-host s1.mongo.infrastructure.docker:127.0.0.1  -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=basic mse_mongo "mongod" "--bind_ip" "localhost,mongo,s1.mongo.infrastructure.docker" "--replSet" "Workflow" "--keyFile" "/data/keyfile"
           docker inspect mongo
       - name: initialize replica set (from second container)
         shell: pwsh
         run: |
           Start-Sleep -Seconds 5
           docker run --rm --name mongo-client --network mongo-network  mongo:8.0 mongosh -u admin -p basic --host mongo --eval 'rs.initiate({_id: "Workflow", members: [{_id: 0, host: "s1.mongo.infrastructure.docker:27017"}]})'
       #- name: Find solution
       #  shell: pwsh
       #  run: Get-ChildItem -Path ${{ github.workspace }}\ConsoleApp3\bin\Debug\net8.0 -Recurse 
       #- name: Run test application
       #  run: |
       #    cd ${{ github.workspace }}\ConsoleApp3\bin\Debug\net8.0
       #    $command = “.\ConsoleApp3.exe”
       #    Invoke-Expression $command
       #  
       
       - name: check mongo status
         id: check_mongo_status
         shell: pwsh
         run: |
           do
           {
              Start-Sleep -Seconds 2
              docker inspect mongo -f '{{.State.Running}}'
              $count++
           } while ($count -lt 10)
       #- name: Install Mongo Shell into Docker container 
       #  shell: pwsh
       #  run: docker exec -d mongo powershell -c Invoke-WebRequest -Uri https://downloads.mongodb.com/compass/mongosh-2.5.0-win32-x64.zip -OutFile C:\mongo\bin
       #- name: Initialize MongoDB Replica Set
       #  run: |
       #    sleep 5 # Give mongo a chance to start up
       #    docker run --rm mongo:6.0 mongosh --host 172.17.0.1 --eval 'rs.initiate({_id: "Workflow", members: [{_id: 0, host: "172.17.0.1:27017"}]})'
       - name: Stop MongoDB
         run: |
           docker rm -f mongo
           docker rm -f mongo-client
    
